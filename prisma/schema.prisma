generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Atendimento {
  atendimento_id                                                      Int                @id @default(autoincrement())
  paciente_id                                                         Int
  consulta_id                                                         Int?
  recepcionista_id                                                    Int
  avaliacao_clinica_id                                                Int?
  inicio                                                              DateTime
  fim                                                                 DateTime?
  Recepcionista                                                       Recepcionista      @relation(fields: [recepcionista_id], references: [recepcionista_id], onDelete: NoAction, onUpdate: NoAction)
  Paciente                                                            Paciente           @relation(fields: [paciente_id], references: [paciente_id], onDelete: NoAction, onUpdate: NoAction)
  Consulta                                                            Consulta?          @relation(fields: [consulta_id], references: [consulta_id], onDelete: NoAction, onUpdate: NoAction)
  AvaliacaoClinica_Atendimento_avaliacao_clinica_idToAvaliacaoClinica AvaliacaoClinica?  @relation("Atendimento_avaliacao_clinica_idToAvaliacaoClinica", fields: [avaliacao_clinica_id], references: [avaliacao_clinica_id], onDelete: NoAction, onUpdate: NoAction)
  AvaliacaoClinica_AvaliacaoClinica_atendimento_idToAtendimento       AvaliacaoClinica[] @relation("AvaliacaoClinica_atendimento_idToAtendimento")
  FilaDePrioridade                                                    FilaDePrioridade?
}

model AvaliacaoClinica {
  avaliacao_clinica_id                                           Int                  @id @default(autoincrement())
  atendimento_id                                                 Int
  classificacao_risco_id                                         Int
  pressao_arterial                                               String
  frequencia_cardiaca                                            Int
  frequencia_respiratoria                                        Int
  temperatura                                                    Int
  saturacao_oxigenio                                             Int
  nivel_dor                                                      Int
  Atendimento_Atendimento_avaliacao_clinica_idToAvaliacaoClinica Atendimento[]        @relation("Atendimento_avaliacao_clinica_idToAvaliacaoClinica")
  Atendimento_AvaliacaoClinica_atendimento_idToAtendimento       Atendimento          @relation("AvaliacaoClinica_atendimento_idToAtendimento", fields: [atendimento_id], references: [atendimento_id], onDelete: NoAction, onUpdate: NoAction)
  ClassificacaoDeRisco                                           ClassificacaoDeRisco @relation(fields: [classificacao_risco_id], references: [classificacao_risco_id], onDelete: NoAction, onUpdate: NoAction)
}

model ClassificacaoDeRisco {
  classificacao_risco_id    Int                @id @default(autoincrement())
  cor                       String
  prioridade                Int
  tempo_max_espera_segundos Int
  AvaliacaoClinica          AvaliacaoClinica[]
  FilaDePrioridade          FilaDePrioridade[]
}

model Consulta {
  consulta_id Int           @id @default(autoincrement())
  medico_id   Int
  inicio      DateTime
  fim         DateTime?
  diagnostico String?
  Atendimento Atendimento[]
  Medico      Medico        @relation(fields: [medico_id], references: [medico_id], onDelete: NoAction, onUpdate: NoAction)
}

model Enfermeira {
  enfermeira_id   Int      @id @default(autoincrement())
  coren           String
  nome            String
  cpf             String
  data_nascimento DateTime
  sexo            String
  estado_civil    String?
  telefone        String
  nome_pai        String?
  nome_mae        String?
}

model FilaDePrioridade {
  atendimento_id         Int                  @id @default(autoincrement())
  paciente_id            Int
  classificacao_risco_id Int
  ClassificacaoDeRisco   ClassificacaoDeRisco @relation(fields: [classificacao_risco_id], references: [classificacao_risco_id], onDelete: NoAction, onUpdate: NoAction)
  Paciente               Paciente             @relation(fields: [paciente_id], references: [paciente_id], onDelete: NoAction, onUpdate: NoAction)
  Atendimento            Atendimento          @relation(fields: [atendimento_id], references: [atendimento_id], onDelete: NoAction, onUpdate: NoAction)
}

model Medico {
  medico_id       Int        @id @default(autoincrement())
  especialidade   String
  crm             String
  nome            String
  cpf             String
  data_nascimento DateTime
  sexo            String
  estado_civil    String?
  telefone        String
  nome_pai        String?
  nome_mae        String?
  Consulta        Consulta[]
}

model Paciente {
  paciente_id      Int                @id @default(autoincrement())
  nome             String
  nome_pai         String?
  nome_mae         String?
  cartao_sus       String?
  cpf              String
  data_nascimento  DateTime
  tipo_sanguineo   String?
  sexo             String
  estado_civil     String
  telefone         String?
  Atendimento      Atendimento[]
  FilaDePrioridade FilaDePrioridade[]
}

model Recepcionista {
  recepcionista_id Int           @id @default(autoincrement())
  nome             String
  cpf              String
  data_nascimento  DateTime
  sexo             String
  estado_civil     String?
  telefone         String
  nome_pai         String?
  nome_mae         String?
  Atendimento      Atendimento[]
}

model Usuario {
  usuario_id    Int    @id @default(autoincrement())
  email         String @unique(map: "sqlite_autoindex_Usuario_1")
  senha         String
  papel         String
  referencia_id Int
}
